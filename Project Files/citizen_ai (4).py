# -*- coding: utf-8 -*-
"""Citizen AI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CKdD6U7DJYUt19MFZpR3tTbbkbI2-vnd
"""

import os
import sys
import subprocess
import time
from datetime import datetime

# Verify GPU runtime (optional, but good for diagnostics)
print("Checking for GPU availability...")
try:
    import torch
    if torch.cuda.is_available():
        print("CUDA (GPU) is available!")
        print(f"Device Name: {torch.cuda.get_device_name(0)}")
    else:
        print("CUDA (GPU) is NOT available. Model loading will be slow on CPU.")
        print("Please ensure you have a GPU runtime enabled (Runtime -> Change runtime type).")
except ImportError:
    print("PyTorch not installed, cannot check for GPU. Ensure it's installed if using a GPU.")


# Create main project directory
project_dir = "citizen_ai_app"
if not os.path.exists(project_dir):
    os.makedirs(project_dir)

# Create templates directory
templates_dir = os.path.join(project_dir, "templates")
if not os.path.exists(templates_dir):
    os.makedirs(templates_dir)

# Create static directory and its subfolders
static_dir = os.path.join(project_dir, "static")
if not os.path.exists(static_dir):
    os.makedirs(static_dir)
if not os.path.exists(os.path.join(static_dir, "Images")):
    os.makedirs(os.path.join(static_dir, "Images"))
if not os.path.exists(os.path.join(static_dir, "Favicon")):
    os.makedirs(os.path.join(static_dir, "Favicon"))

print("Project directories created.")

print("Installing required Python libraries...")
!pip install Flask transformers torch bitsandbytes accelerate sentencepiece pyngrok
print("Libraries installed.")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile citizen_ai_app/app.py
# # Import necessary libraries
# from flask import Flask, request, jsonify, render_template, send_from_directory, redirect, url_for
# from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline
# import torch
# import os
# import logging
# from datetime import datetime
# #os.environ["HF_TOKEN"] = "YOUR_HUGGINGFACE_TOKEN"
# 
# # Configure logging
# logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
# 
# # --- 1. Flask Application Setup ---
# app = Flask(__name__)
# 
# # --- 2. Model Loading Variables (Initialized to None) ---
# tokenizer = None
# model = None
# text_generator = None
# MODEL_NAME = "ibm-granite/granite-3.3-2b-instruct"
# HUGGING_FACE_TOKEN = os.getenv("HF_TOKEN")
# 
# # In-memory database for demonstration purposes
# # IMPORTANT: Removed in-memory users_db as Firebase handles it now.
# # users_db = {} # username: hashed_password
# 
# # Placeholder for sentiment data (for dashboard simulation)
# # In a real application, this would be stored in a database.
# sentiment_data = {
#     "Positive": 0,
#     "Neutral": 0,
#     "Negative": 0,
#     "total_interactions": 0,
#     "interaction_trends": [] # Store timestamps for trend analysis
# }
# 
# # --- 3. Flask Routes for HTML Pages ---
# 
# @app.route('/')
# def index():
#     """Renders the home page."""
#     return render_template('index.html')
# 
# @app.route('/about')
# def about():
#     """Renders the about page."""
#     return render_template('about.html')
# 
# @app.route('/services')
# def services():
#     """Renders the services page."""
#     return render_template('services.html')
# 
# @app.route('/login', methods=['GET'])
# def login():
#     """
#     Renders the login page.
#     Authentication logic is now handled client-side with Firebase.
#     """
#     return render_template('login.html')
# 
# @app.route('/signup', methods=['GET'])
# def signup_page():
#     """Renders the signup page."""
#     return render_template('signup.html')
# 
# 
# @app.route('/chat')
# def chat_page():
#     """Renders the chat interface page (Scenario 1 & 4)."""
#     return render_template('chat.html')
# 
# @app.route('/dashboard')
# def dashboard_page():
#     """
#     Renders the dynamic dashboard page (Scenario 3).
#     Passes current sentiment data to the template.
#     """
#     # In a real app, this would fetch from a database
#     return render_template('dashboard.html', sentiment_data=sentiment_data)
# 
# # Serve static files like CSS from the static folder
# @app.route('/static/<path:filename>')
# def static_files(filename):
#     return send_from_directory('static', filename)
# 
# # --- 4. API Endpoints (Flask backend for AI and Dashboard) ---
# # Removed /signup_api and /login_api as Firebase client-side handles authentication
# 
# @app.route("/chat_api", methods=["POST"])
# def chat_with_assistant():
#     """
#     API Endpoint for Scenario 1 & 4: Real-Time Conversational AI Assistant & Personalized & Contextual Response System.
#     Engage with the AI assistant by sending a user query and optional context.
#     """
#     if text_generator is None:
#         return jsonify({"response": "AI model is not loaded. Please try again later.", "model_name": MODEL_NAME}), 503 # Service Unavailable
# 
#     data = request.json
#     user_query = data.get("user_query")
#     context = data.get("context", "")
# 
#     if not user_query:
#         return jsonify({"error": "user_query is required"}), 400
# 
#     # Construct the prompt for the model
#     prompt = f"Human: {user_query}"
#     if context:
#         prompt = f"Context: {context}\n" + prompt
#     prompt += "\nAssistant:"
# 
#     logging.info(f"Received chat query: '{user_query}' with context: '{context}'")
#     logging.info(f"Generated prompt: {prompt}")
# 
#     try:
#         # Generate response using the loaded pipeline
#         result = text_generator(prompt)
#         generated_text = result[0]['generated_text']
# 
#         # Post-process the generated text to extract only the assistant's response
#         response_text = generated_text
#         if "Assistant:" in generated_text:
#             response_text = generated_text.split("Assistant:", 1)[1].strip()
#         elif "Human:" in generated_text: # Handle cases where model starts next turn
#             response_text = generated_text.split("Human:", 1)[0].strip()
#         else:
#             response_text = generated_text.strip()
# 
#         # Clean up any potential leftover prompt parts or unwanted characters
#         response_text = response_text.replace(prompt, "").strip()
#         if response_text.startswith("User:") or response_text.startswith("Human:"):
#             response_text = ""
# 
#         if not response_text:
#             response_text = "I'm sorry, I couldn't generate a clear response. Could you please rephrase?"
# 
#         # Update interaction trends for dashboard
#         sentiment_data["total_interactions"] += 1
#         sentiment_data["interaction_trends"].append(datetime.now().isoformat())
# 
#         return jsonify({"response": response_text, "model_name": MODEL_NAME})
#     except Exception as e:
#         logging.error(f"Error during chat generation: {e}", exc_info=True)
#         return jsonify({"response": f"An error occurred: {e}", "model_name": MODEL_NAME}), 500
# 
# @app.route("/sentiment_api", methods=["POST"])
# def analyze_citizen_sentiment():
#     """
#     API Endpoint for Scenario 2: Citizen Sentiment Analysis.
#     Analyzes the sentiment of provided text (Positive, Neutral, or Negative)
#     using the Granite model itself via prompting.
#     """
#     if text_generator is None:
#         return jsonify({
#             "text": "",
#             "sentiment": "Error: Model not loaded.",
#             "analysis_method": "Granite Model Prompting"
#         }), 503
# 
#     data = request.json
#     text = data.get("text")
# 
#     if not text:
#         return jsonify({"error": "text is required"}), 400
# 
#     sentiment_prompt = (
#         f"Analyze the sentiment of the following text as 'Positive', 'Neutral', or 'Negative'. "
#         f"Provide only the sentiment label.\\n\\nText: \\\"{text}\\\"\\nSentiment:"
#     )
# 
#     logging.info(f"Analyzing sentiment for text: '{text}'")
#     logging.info(f"Generated sentiment prompt: {sentiment_prompt}")
# 
#     try:
#         sentiment_result = text_generator(sentiment_prompt)
#         generated_sentiment_text = sentiment_result[0]['generated_text']
# 
#         sentiment_label = "Neutral" # Default
#         if "Positive" in generated_sentiment_text:
#             sentiment_label = "Positive"
#         elif "Negative" in generated_sentiment_text:
#             sentiment_label = "Negative"
#         elif "Neutral" in generated_sentiment_text:
#             sentiment_label = "Neutral"
#         else:
#             logging.warning(f"Could not clearly extract sentiment from '{generated_sentiment_text}'. Defaulting to Neutral.")
# 
#         # Update sentiment data for dashboard
#         if sentiment_label in sentiment_data:
#             sentiment_data[sentiment_label] += 1
# 
#         # Update interaction trends for sentiment analysis (can be separate or combined)
#         sentiment_data["total_interactions"] += 1
#         sentiment_data["interaction_trends"].append(datetime.now().isoformat())
# 
# 
#         return jsonify({
#             "text": text,
#             "sentiment": sentiment_label,
#             "analysis_method": "Granite Model Prompting"
#         })
#     except Exception as e:
#         logging.error(f"Error during sentiment analysis: {e}", exc_info=True)
#         return jsonify({
#             "text": text,
#             "sentiment": f"Error: {e}",
#             "analysis_method": "Granite Model Prompting"
#         }), 500
# 
# @app.route("/dashboard_data")
# def get_dashboard_data():
#     """
#     API endpoint to provide dynamic data for the dashboard (Scenario 3).
#     In a real application, this would fetch aggregated data from a database.
#     """
#     return jsonify(sentiment_data)
# 
# 
# # --- 5. Run the Flask App (for Google Colab) ---
# if __name__ == "__main__":
#     # --- Model Loading ---
#     logging.info(f"Loading model: {MODEL_NAME} (from __main__ block)...")
#     try:
#         # Load tokenizer
#         tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
#         # Load model (use `trust_remote_code=True` if necessary, depends on the model)
#         # Using `torch_dtype=torch.bfloat16` for memory efficiency if GPU supports it
#         # Otherwise, `torch.float16` or default `torch.float32`
#         model = AutoModelForCausalLM.from_pretrained(
#             MODEL_NAME,
#             torch_dtype=torch.bfloat16 if torch.cuda.is_available() else torch.float32,
#             trust_remote_code=True,
#             # If you encounter memory issues, uncomment the following line
#             # load_in_8bit=True # Requires `bitsandbytes` and `accelerate`
#         )
# 
#         # Move model to GPU if available
#         if torch.cuda.is_available():
#             model.to("cuda")
#             logging.info("Model moved to GPU.")
#         else:
#             logging.warning("CUDA not available. Model running on CPU (might be slow).")
# 
#         # Create a Hugging Face pipeline for text generation
#         text_generator = pipeline(
#             "text-generation",
#             model=model,
#             tokenizer=tokenizer,
#             max_new_tokens=200, # Maximum tokens to generate in response
#             do_sample=True,
#             temperature=0.7,
#             top_p=0.9,
#             repetition_penalty=1.2,
#             eos_token_id=tokenizer.eos_token_id,
#         )
#         logging.info("Model and pipeline loaded successfully!")
#     except Exception as e:
#         logging.error(f"Error loading model: {e}", exc_info=True)
#         # In a production scenario, you might want to exit or log more severely.
# 
#     # Start the Flask application
#     logging.info("Starting Flask application server...")
#     app.run(host='0.0.0.0', port=8000, debug=False) # Set debug=True for development, False for deployment
#

# Commented out IPython magic to ensure Python compatibility.
# %%writefile citizen_ai_app/run_flask_app.py
# # This script is specifically for running the Flask application directly.
# import sys
# import os
# import time
# 
# # Add the parent directory to the Python path
# # This allows 'app.py' to be imported correctly.
# sys.path.append(os.path.dirname(os.path.abspath(__file__)))
# 
# # Directly execute the app.py file.
# # This bypasses the 'flask run' command which seems to be causing issues
# # with environment/caching in Colab.
# # When app.py is executed, its `if __name__ == '__main__':` block will run,
# # which now contains the model loading and `app.run()`.
# if __name__ == '__main__':
#     # Execute app.py as a module, treating it as the main script
#     import runpy
#     runpy.run_module('app', run_name='__main__', alter_sys=True)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile citizen_ai_app/templates/index.html
# <!DOCTYPE html>
# <html lang="en">
# <head>
#     <meta charset="UTF-8">
#     <meta name="viewport" content="width=device-width, initial-scale=1.0">
#     <title>Citizen AI - Home</title>
#     <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
#     <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
# </head>
# <body class="bg-gray-100 font-inter">
#     <header class="bg-blue-600 text-white p-4 shadow-md">
#         <div class="container mx-auto flex justify-between items-center">
#             <h1 class="text-3xl font-bold">Citizen AI 🤖</h1>
#             <nav>
#                 <ul class="flex space-x-4">
#                     <li><a href="/" class="hover:underline">Home</a></li>
#                     <li><a href="/about" class="hover:underline">About</a></li>
#                     <li><a href="/services" class="hover:underline">Services</a></li>
#                     <li><a href="/chat" class="hover:underline">Chat</a></li>
#                     <li><a href="/dashboard" class="hover:underline">Dashboard</a></li>
#                     <li><a href="/login" class="hover:underline">Login</a></li>
#                 </ul>
#             </nav>
#         </div>
#     </header>
# 
#     <main class="container mx-auto p-8 mt-8 bg-white rounded-lg shadow-lg">
#         <section class="text-center mb-12">
#             <h2 class="text-5xl font-extrabold text-gray-800 mb-4 animate-fade-in">Empowering Citizens, Enabling Governments</h2>
#             <p class="text-xl text-gray-600 max-w-2xl mx-auto animate-slide-up">
#                 Citizen AI revolutionizes civic engagement with intelligent, real-time AI assistance and data-driven insights.
#             </p>
#             <div class="mt-8 flex justify-center space-x-4">
#                 <a href="/chat" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-full shadow-lg transition duration-300 transform hover:scale-105">
#                     Start Chatting Now
#                 </a>
#                 <a href="/dashboard" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-3 px-6 rounded-full shadow-lg transition duration-300 transform hover:scale-105">
#                     View Dashboard
#                 </a>
#             </div>
#         </section>
# 
#         <section class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
#             <div class="bg-gradient-to-br from-blue-500 to-indigo-600 text-white p-6 rounded-lg shadow-xl transform transition-transform duration-300 hover:scale-105">
#                 <h3 class="text-2xl font-semibold mb-3">Real-Time AI Assistant</h3>
#                 <p>Get instant answers to your questions about government services and policies, 24/7.</p>
#             </div>
#             <div class="bg-gradient-to-br from-green-500 to-teal-600 text-white p-6 rounded-lg shadow-xl transform transition-transform duration-300 hover:scale-105">
#                 <h3 class="text-2xl font-semibold mb-3">Citizen Sentiment Analysis</h3>
#                 <p>Understand public feedback and identify areas of satisfaction or concern instantly.</p>
#             </div>
#             <div class="bg-gradient-to-br from-purple-500 to-pink-600 text-white p-6 rounded-lg shadow-xl transform transition-transform duration-300 hover:scale-105">
#                 <h3 class="text-2xl font-semibold mb-3">Dynamic Analytics Dashboard</h3>
#                 <p>Visualize key citizen engagement metrics and make data-driven decisions.</p>
#             </div>
#         </section>
# 
#         <section class="text-center">
#             <h2 class="text-4xl font-bold text-gray-800 mb-6">Why Choose Citizen AI?</h2>
#             <div class="max-w-3xl mx-auto text-lg text-gray-700">
#                 <p class="mb-4">
#                     Citizen AI leverages cutting-edge IBM Granite models for superior natural language understanding and generation, providing accurate and contextual responses. Our platform streamlines communication, reduces administrative burden, and fosters greater transparency and trust between citizens and government.
#                 </p>
#                 <p>
#                     From automating routine inquiries to providing actionable insights for policymakers, Citizen AI is built to enhance every aspect of public service delivery.
#                 </p>
#             </div>
#         </section>
#     </main>
# 
#     <footer class="bg-gray-800 text-white p-6 mt-12 text-center">
#         <div class="container mx-auto">
#             <p>&copy; 2025 Citizen AI. All rights reserved. Powered by IBM Granite.</p>
#         </div>
#     </footer>
# 
#     <script src="https://cdn.tailwindcss.com"></script>
# </body>
# </html>

# Commented out IPython magic to ensure Python compatibility.
# %%writefile citizen_ai_app/templates/about.html
# <!DOCTYPE html>
# <html lang="en">
# <head>
#     <meta charset="UTF-8">
#     <meta name="viewport" content="width=device-width, initial-scale=1.0">
#     <title>Citizen AI - About Us</title>
#     <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
#     <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
# </head>
# <body class="bg-gray-100 font-inter">
#     <header class="bg-blue-600 text-white p-4 shadow-md">
#         <div class="container mx-auto flex justify-between items-center">
#             <h1 class="text-3xl font-bold">Citizen AI 🤖</h1>
#             <nav>
#                 <ul class="flex space-x-4">
#                     <li><a href="/" class="hover:underline">Home</a></li>
#                     <li><a href="/about" class="hover:underline">About</a></li>
#                     <li><a href="/services" class="hover:underline">Services</a></li>
#                     <li><a href="/chat" class="hover:underline">Chat</a></li>
#                     <li><a href="/dashboard" class="hover:underline">Dashboard</a></li>
#                     <li><a href="/login" class="hover:underline">Login</a></li>
#                 </ul>
#             </nav>
#         </div>
#     </header>
# 
#     <main class="container mx-auto p-8 mt-8 bg-white rounded-lg shadow-lg">
#         <section class="text-center mb-12">
#             <h2 class="text-4xl font-extrabold text-gray-800 mb-4">About Citizen AI</h2>
#             <p class="text-lg text-gray-600 max-w-3xl mx-auto">
#                 Citizen AI is at the forefront of transforming public engagement through intelligent automation and data insights.
#             </p>
#         </section>
# 
#         <section class="mb-12">
#             <h3 class="text-3xl font-semibold text-gray-800 mb-6 text-center">Our Mission</h3>
#             <p class="text-lg text-gray-700 max-w-4xl mx-auto leading-relaxed">
#                 Our mission is to bridge the gap between citizens and government agencies by providing an intuitive, efficient,
#                 and transparent platform for communication. We aim to enhance citizen satisfaction, streamline government
#                 operations, and foster a more responsive and accountable digital governance ecosystem.
#             </p>
#         </section>
# 
#         <section class="mb-12">
#             <h3 class="text-3xl font-semibold text-gray-800 mb-6 text-center">How It Works</h3>
#             <div class="grid grid-cols-1 md:grid-cols-2 gap-8 max-w-5xl mx-auto">
#                 <div class="bg-blue-50 p-6 rounded-lg shadow-md">
#                     <h4 class="text-xl font-bold text-blue-700 mb-3">AI-Powered Conversations</h4>
#                     <p class="text-gray-700">
#                         At its core, Citizen AI uses advanced IBM Granite models to understand and respond to citizen inquiries.
#                         Whether it's a question about policy, a service request, or reporting an issue, our AI provides
#                         accurate and contextual responses in real-time.
#                     </p>
#                 </div>
#                 <div class="bg-green-50 p-6 rounded-lg shadow-md">
#                     <h4 class="text-xl font-bold text-green-700 mb-3">Sentiment Intelligence</h4>
#                     <p class="text-gray-700">
#                         Beyond answering questions, Citizen AI analyzes the sentiment behind citizen interactions. This provides
#                         governments with a pulse on public mood, enabling proactive responses to concerns and recognition
#                         of successful initiatives.
#                     </p>
#                 </div>
#                 <div class="bg-purple-50 p-6 rounded-lg shadow-md">
#                     <h4 class="text-xl font-bold text-purple-700 mb-3">Dynamic Insights</h4>
#                     <p class="text-gray-700">
#                         All interactions and sentiment data feed into a dynamic dashboard, offering real-time visualizations
#                         and actionable insights for policymakers. This supports data-driven decision-making and continuous
#                         improvement of public services.
#                     </p>
#                 </div>
#                 <div class="bg-yellow-50 p-6 rounded-lg shadow-md">
#                     <h4 class="text-xl font-bold text-yellow-700 mb-3">Secure & Scalable</h4>
#                     <p class="text-gray-700">
#                         Built with robust technologies, Citizen AI is designed for secure, reliable, and scalable
#                         deployment, capable of handling large volumes of citizen interactions without compromising performance.
#                     </p>
#                 </div>
#             </div>
#         </section>
# 
#         <section class="text-center">
#             <h3 class="text-3xl font-semibold text-gray-800 mb-6">Our Team</h3>
#             <p class="text-lg text-gray-700 max-w-3xl mx-auto">
#                 We are a dedicated team of AI researchers, developers, and public service enthusiasts committed to
#                 innovating the future of civic technology. We believe in the power of AI to create more accessible
#                 and responsive government services.
#             </p>
#         </section>
#     </main>
# 
#     <footer class="bg-gray-800 text-white p-6 mt-12 text-center">
#         <div class="container mx-auto">
#             <p>&copy; 2025 Citizen AI. All rights reserved. Powered by IBM Granite.</p>
#         </div>
#     </footer>
# 
#     <script src="https://cdn.tailwindcss.com"></script>
# </body>
# </html>

# Commented out IPython magic to ensure Python compatibility.
# %%writefile citizen_ai_app/templates/services.html
# <!DOCTYPE html>
# <html lang="en">
# <head>
#     <meta charset="UTF-8">
#     <meta name="viewport" content="width=device-width, initial-scale=1.0">
#     <title>Citizen AI - Services</title>
#     <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
#     <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
# </head>
# <body class="bg-gray-100 font-inter">
#     <header class="bg-blue-600 text-white p-4 shadow-md">
#         <div class="container mx-auto flex justify-between items-center">
#             <h1 class="text-3xl font-bold">Citizen AI 🤖</h1>
#             <nav>
#                 <ul class="flex space-x-4">
#                     <li><a href="/" class="hover:underline">Home</a></li>
#                     <li><a href="/about" class="hover:underline">About</a></li>
#                     <li><a href="/services" class="hover:underline">Services</a></li>
#                     <li><a href="/chat" class="hover:underline">Chat</a></li>
#                     <li><a href="/dashboard" class="hover:underline">Dashboard</a></li>
#                     <li><a href="/login" class="hover:underline">Login</a></li>
#                 </ul>
#             </nav>
#         </div>
#     </header>
# 
#     <main class="container mx-auto p-8 mt-8 bg-white rounded-lg shadow-lg">
#         <section class="text-center mb-12">
#             <h2 class="text-4xl font-extrabold text-gray-800 mb-4">Our Services</h2>
#             <p class="text-lg text-gray-600 max-w-3xl mx-auto">
#                 Citizen AI offers a suite of services designed to enhance government-citizen interactions.
#             </p>
#         </section>
# 
#         <section class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
#             <div class="bg-white p-6 rounded-lg shadow-lg border-t-4 border-blue-500">
#                 <h3 class="text-2xl font-semibold text-blue-700 mb-3">24/7 Information Access</h3>
#                 <p class="text-gray-700">
#                     Citizens can get instant, accurate information on government services, policies, and procedures
#                     anytime, anywhere, reducing wait times and improving accessibility.
#                 </p>
#                 <ul class="list-disc list-inside mt-4 text-gray-600">
#                     <li>AI-powered FAQ and knowledge base</li>
#                     <li>Multi-lingual support (future enhancement)</li>
#                     <li>Contextual understanding for complex queries</li>
#                 </ul>
#             </div>
#             <div class="bg-white p-6 rounded-lg shadow-lg border-t-4 border-green-500">
#                 <h3 class="text-2xl font-semibold text-green-700 mb-3">Issue Reporting & Tracking</h3>
#                 <p class="text-gray-700">
#                     Streamlined process for citizens to report issues (e.g., potholes, public service disruptions)
#                     and track their resolution status in real-time.
#                 </p>
#                 <ul class="list-disc list-inside mt-4 text-gray-600">
#                     <li>Intuitive guided reporting forms</li>
#                     <li>Automated acknowledgment and tracking IDs</li>
#                     <li>Integration with city service departments</li>
#                 </ul>
#             </div>
#             <div class="bg-white p-6 rounded-lg shadow-lg border-t-4 border-purple-500">
#                 <h3 class="text-2xl font-semibold text-purple-700 mb-3">Policy Clarification & Guidance</h3>
#                 <p class="text-gray-700">
#                     Our AI assistant provides clear, concise explanations of complex government policies, regulations,
#                     and eligibility criteria, making information more digestible for the public.
#                 </p>
#                 <ul class="list-disc list-inside mt-4 text-gray-600">
#                     <li>Simplified language explanations</li>
#                     <li>Personalized guidance based on user context</li>
#                     <li>Referrals to relevant official documents</li>
#                 </ul>
#             </div>
#             <div class="bg-white p-6 rounded-lg shadow-lg border-t-4 border-yellow-500">
#                 <h3 class="text-2xl font-semibold text-yellow-700 mb-3">Public Feedback & Engagement</h3>
#                 <p class="text-gray-700">
#                     A dedicated channel for citizens to provide feedback, suggestions, and express opinions on
#                     government services, contributing to data-driven improvements.
#                 </p>
#                 <ul class="list-disc list-inside mt-4 text-gray-600">
#                     <li>Structured feedback collection</li>
#                     <li>Sentiment analysis of submitted text</li>
#                     <li>Anonymous feedback options</li>
#                 </ul>
#             </div>
#         </section>
# 
#         <section class="text-center">
#             <h2 class="text-4xl font-bold text-gray-800 mb-6">Our Technology</h2>
#             <p class="text-lg text-gray-700 max-w-3xl mx-auto">
#                 Citizen AI is powered by the robust IBM Granite 3.3-2B Instruct model for natural language processing,
#                 ensuring accurate and nuanced understanding of citizen queries. Our infrastructure is designed for
#                 high availability and data security.
#             </p>
#         </section>
#     </main>
# 
#     <footer class="bg-gray-800 text-white p-6 mt-12 text-center">
#         <div class="container mx-auto">
#             <p>&copy; 2025 Citizen AI. All rights reserved. Powered by IBM Granite.</p>
#         </div>
#     </footer>
# 
#     <script src="https://cdn.tailwindcss.com"></script>
# </body>
# </html>

# Commented out IPython magic to ensure Python compatibility.
# %%writefile citizen_ai_app/templates/chat.html
# <!DOCTYPE html>
# <html lang="en">
# <head>
#     <meta charset="UTF-8">
#     <meta name="viewport" content="width=device-width, initial-scale=1.0">
#     <title>Citizen AI - Chat</title>
#     <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
#     <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
#     <style>
#         .chat-message {
#             max-width: 80%;
#             padding: 10px 15px;
#             border-radius: 20px;
#             margin-bottom: 10px;
#             word-wrap: break-word;
#         }
#         .user-message {
#             background-color: #DBEAFE; /* blue-100 */
#             align-self: flex-end;
#             border-bottom-right-radius: 5px;
#         }
#         .ai-message {
#             background-color: #D1FAE5; /* green-100 */
#             align-self: flex-start;
#             border-bottom-left-radius: 5px;
#         }
#         .chat-input-container {
#             position: sticky;
#             bottom: 0;
#             background-color: #fff;
#             padding: 15px;
#             border-top: 1px solid #E5E7EB; /* gray-200 */
#         }
#         .spinner {
#             border: 4px solid rgba(0, 0, 0, 0.1);
#             border-left-color: #3B82F6; /* blue-500 */
#             border-radius: 50%;
#             width: 24px;
#             height: 24px;
#             animation: spin 1s linear infinite;
#             display: inline-block;
#             vertical-align: middle;
#             margin-left: 10px;
#         }
#         @keyframes spin {
#             0% { transform: rotate(0deg); }
#             100% { transform: rotate(360deg); }
#         }
#     </style>
# </head>
# <body class="bg-gray-100 font-inter flex flex-col min-h-screen">
#     <header class="bg-blue-600 text-white p-4 shadow-md">
#         <div class="container mx-auto flex justify-between items-center">
#             <h1 class="text-3xl font-bold">Citizen AI 🤖</h1>
#             <nav>
#                 <ul class="flex space-x-4">
#                     <li><a href="/" class="hover:underline">Home</a></li>
#                     <li><a href="/about" class="hover:underline">About</a></li>
#                     <li><a href="/services" class="hover:underline">Services</a></li>
#                     <li><a href="/chat" class="hover:underline">Chat</a></li>
#                     <li><a href="/dashboard" class="hover:underline">Dashboard</a></li>
#                     <li><a href="/login" class="hover:underline">Login</a></li>
#                 </ul>
#             </nav>
#         </div>
#     </header>
# 
#     <main class="container mx-auto p-8 mt-8 bg-white rounded-lg shadow-lg flex-grow flex flex-col">
#         <h2 class="text-4xl font-extrabold text-gray-800 mb-6 text-center">Real-Time Conversational AI Assistant</h2>
#         <div id="chat-window" class="flex-grow bg-gray-50 p-6 rounded-lg flex flex-col overflow-y-auto mb-4 border border-gray-200" style="min-height: 400px; max-height: 600px;">
#             <!-- Chat messages will be appended here -->
#             <div class="chat-message ai-message">Hello! How can I assist you with government services today? Ask me anything!</div>
#         </div>
# 
#         <div class="chat-input-container flex items-center rounded-lg shadow-md border border-gray-300">
#             <input type="text" id="user-input" class="flex-grow p-3 rounded-l-lg focus:outline-none text-gray-800" placeholder="Type your question...">
#             <button id="send-button" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-r-lg transition duration-300 transform hover:scale-105">
#                 Send
#             </button>
#         </div>
#     </main>
# 
#     <footer class="bg-gray-800 text-white p-6 mt-12 text-center">
#         <div class="container mx-auto">
#             <p>&copy; 2025 Citizen AI. All rights reserved. Powered by IBM Granite.</p>
#         </div>
#     </footer>
# 
#     <script src="https://cdn.tailwindcss.com"></script>
#     <script>
#         // Copy text to clipboard function (from prior guidance)
#         function copyToClipboard(text) {
#             const textarea = document.createElement('textarea');
#             textarea.value = text;
#             document.body.appendChild(textarea);
#             textarea.select();
#             document.execCommand('copy');
#             document.body.removeChild(textarea);
#             alert('Copied to clipboard!'); // Using alert for simplicity, consider a custom modal in production
#         }
# 
#         const chatWindow = document.getElementById('chat-window');
#         const userInput = document.getElementById('user-input');
#         const sendButton = document.getElementById('send-button');
# 
#         sendButton.addEventListener('click', sendMessage);
#         userInput.addEventListener('keypress', function(e) {
#             if (e.key === 'Enter') {
#                 sendMessage();
#             }
#         });
# 
#         async function sendMessage() {
#             const userText = userInput.value.trim();
#             if (userText === "") return;
# 
#             // Display user message
#             const userMessageDiv = document.createElement('div');
#             userMessageDiv.className = 'chat-message user-message';
#             userMessageDiv.textContent = userText;
#             chatWindow.appendChild(userMessageDiv);
# 
#             userInput.value = ''; // Clear input field
#             chatWindow.scrollTop = chatWindow.scrollHeight; // Scroll to bottom
# 
#             // Display thinking indicator
#             const thinkingDiv = document.createElement('div');
#             thinkingDiv.className = 'chat-message ai-message';
#             thinkingDiv.innerHTML = 'Citizen AI is thinking... <span class="spinner"></span>';
#             chatWindow.appendChild(thinkingDiv);
#             chatWindow.scrollTop = chatWindow.scrollHeight;
# 
#             try {
#                 const response = await fetch('/chat_api', {
#                     method: 'POST',
#                     headers: {
#                         'Content-Type': 'application/json',
#                     },
#                     body: JSON.stringify({ user_query: userText }),
#                 });
# 
#                 const data = await response.json();
# 
#                 // Remove thinking indicator
#                 chatWindow.removeChild(thinkingDiv);
# 
#                 const aiMessageDiv = document.createElement('div');
#                 aiMessageDiv.className = 'chat-message ai-message';
#                 aiMessageDiv.textContent = data.response;
#                 chatWindow.appendChild(aiMessageDiv);
# 
#                 chatWindow.scrollTop = chatWindow.scrollHeight; // Scroll to bottom
#             } catch (error) {
#                 console.error('Error fetching chat response:', error);
#                 // Remove thinking indicator
#                 chatWindow.removeChild(thinkingDiv);
# 
#                 const errorMessageDiv = document.createElement('div');
#                 errorMessageDiv.className = 'chat-message ai-message bg-red-100 text-red-800';
#                 errorMessageDiv.textContent = 'Error: Could not get a response from AI. Please try again.';
#                 chatWindow.appendChild(errorMessageDiv);
#                 chatWindow.scrollTop = chatWindow.scrollHeight;
#             }
#         }
#     </script>
# </body>
# </html>

# Commented out IPython magic to ensure Python compatibility.
# %%writefile citizen_ai_app/templates/dashboard.html
# <!DOCTYPE html>
# <html lang="en">
# <head>
#     <meta charset="UTF-8">
#     <meta name="viewport" content="width=device-width, initial-scale=1.0">
#     <title>Citizen AI - Dashboard</title>
#     <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
#     <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
#     <!-- Chart.js for visualizations -->
#     <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
#     <style>
#         .card {
#             background-color: white;
#             padding: 1.5rem;
#             border-radius: 0.5rem;
#             box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
#             text-align: center;
#         }
#         .metric-value {
#             font-size: 2.5rem;
#             font-weight: bold;
#             color: #3B82F6; /* blue-500 */
#         }
#         .metric-label {
#             font-size: 1.125rem;
#             color: #4B5563; /* gray-700 */
#         }
#     </style>
# </head>
# <body class="bg-gray-100 font-inter">
#     <header class="bg-blue-600 text-white p-4 shadow-md">
#         <div class="container mx-auto flex justify-between items-center">
#             <h1 class="text-3xl font-bold">Citizen AI 🤖</h1>
#             <nav>
#                 <ul class="flex space-x-4">
#                     <li><a href="/" class="hover:underline">Home</a></li>
#                     <li><a href="/about" class="hover:underline">About</a></li>
#                     <li><a href="/services" class="hover:underline">Services</a></li>
#                     <li><a href="/chat" class="hover:underline">Chat</a></li>
#                     <li><a href="/dashboard" class="hover:underline">Dashboard</a></li>
#                     <li><a href="/login" class="hover:underline">Login</a></li>
#                 </ul>
#             </nav>
#         </div>
#     </header>
# 
#     <main class="container mx-auto p-8 mt-8 bg-white rounded-lg shadow-lg">
#         <section class="text-center mb-12">
#             <h2 class="text-4xl font-extrabold text-gray-800 mb-4">Dynamic Citizen Sentiment Dashboard</h2>
#             <p class="text-lg text-gray-600 max-w-3xl mx-auto">
#                 Real-time insights into citizen feedback and interactions.
#             </p>
#         </section>
# 
#         <section class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12">
#             <div class="card">
#                 <div class="metric-value text-blue-600" id="total-interactions">0</div>
#                 <div class="metric-label">Total Interactions</div>
#             </div>
#             <div class="card">
#                 <div class="metric-value text-green-600" id="positive-feedback">0</div>
#                 <div class="metric-label">Positive Feedback</div>
#             </div>
#             <div class="card">
#                 <div class="metric-value text-red-600" id="negative-feedback">0</div>
#                 <div class="metric-label">Negative Feedback</div>
#             </div>
#         </section>
# 
#         <section class="mb-12">
#             <h3 class="text-2xl font-bold text-gray-800 mb-4">Sentiment Distribution</h3>
#             <div class="bg-gray-50 p-4 rounded-lg shadow-inner">
#                 <canvas id="sentimentChart"></canvas>
#             </div>
#         </section>
# 
#         <section class="mb-12">
#             <h3 class="text-2xl font-bold text-gray-800 mb-4">Interaction Trends Over Time</h3>
#             <div class="bg-gray-50 p-4 rounded-lg shadow-inner">
#                 <canvas id="trendChart"></canvas>
#             </div>
#         </section>
# 
#         <section>
#             <h3 class="text-2xl font-bold text-gray-800 mb-4">Recent Citizen Feedback</h3>
#             <div class="bg-gray-50 p-4 rounded-lg shadow-inner overflow-x-auto">
#                 <table class="min-w-full divide-y divide-gray-200">
#                     <thead class="bg-gray-100">
#                         <tr>
#                             <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Timestamp</th>
#                             <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Text</th>
#                             <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sentiment</th>
#                         </tr>
#                     </thead>
#                     <tbody id="feedback-table-body" class="bg-white divide-y divide-gray-200">
#                         <!-- Data will be loaded here by JavaScript -->
#                     </tbody>
#                 </table>
#                 <p id="no-feedback-message" class="text-center text-gray-500 py-4 hidden">No citizen feedback recorded yet.</p>
#             </div>
#         </section>
#     </main>
# 
#     <footer class="bg-gray-800 text-white p-6 mt-12 text-center">
#         <div class="container mx-auto">
#             <p>&copy; 2025 Citizen AI. All rights reserved. Powered by IBM Granite.</p>
#         </div>
#     </footer>
# 
#     <script src="https://cdn.tailwindcss.com"></script>
#     <script>
#         async function fetchDashboardData() {
#             try {
#                 const response = await fetch('/dashboard_data');
#                 const data = await response.json();
#                 updateDashboard(data);
#             } catch (error) {
#                 console.error('Error fetching dashboard data:', error);
#                 document.getElementById('no-feedback-message').textContent = 'Error loading data. Please try again.';
#                 document.getElementById('no-feedback-message').classList.remove('hidden');
#             }
#         }
# 
#         let sentimentChartInstance;
#         let trendChartInstance;
# 
#         function updateDashboard(data) {
#             document.getElementById('total-interactions').textContent = data.total_interactions;
#             document.getElementById('positive-feedback').textContent = data.Positive;
#             document.getElementById('negative-feedback').textContent = data.Negative;
# 
#             // Update sentiment chart
#             if (sentimentChartInstance) {
#                 sentimentChartInstance.destroy();
#             }
#             const sentimentCtx = document.getElementById('sentimentChart').getContext('2d');
#             sentimentChartInstance = new Chart(sentimentCtx, {
#                 type: 'doughnut',
#                 data: {
#                     labels: ['Positive', 'Neutral', 'Negative'],
#                     datasets: [{
#                         data: [data.Positive, data.Neutral, data.Negative],
#                         backgroundColor: ['#10B981', '#6B7280', '#EF4444'], // Green, Gray, Red
#                     }]
#                 },
#                 options: {
#                     responsive: true,
#                     maintainAspectRatio: false,
#                     plugins: {
#                         legend: {
#                             position: 'top',
#                         },
#                         title: {
#                             display: false,
#                             text: 'Sentiment Distribution'
#                         }
#                     }
#                 }
#             });
# 
#             // Update trend chart
#             if (trendChartInstance) {
#                 trendChartInstance.destroy();
#             }
#             const trendCtx = document.getElementById('trendChart').getContext('2d');
#             const dates = {};
#             data.interaction_trends.forEach(timestamp => {
#                 const date = new Date(timestamp).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
#                 dates[date] = (dates[date] || 0) + 1;
#             });
#             const sortedDates = Object.keys(dates).sort((a, b) => new Date(a) - new Date(b));
#             const trendCounts = sortedDates.map(date => dates[date]);
# 
#             trendChartInstance = new Chart(trendCtx, {
#                 type: 'line',
#                 data: {
#                     labels: sortedDates,
#                     datasets: [{
#                         label: 'Interactions',
#                         data: trendCounts,
#                         borderColor: '#3B82F6', // blue-500
#                         tension: 0.1,
#                         fill: false
#                     }]
#                 },
#                 options: {
#                     responsive: true,
#                     maintainAspectRatio: false,
#                     plugins: {
#                         legend: {
#                             display: true,
#                             position: 'top',
#                         },
#                         title: {
#                             display: false,
#                             text: 'Interaction Trends Over Time'
#                         }
#                     },
#                     scales: {
#                         x: {
#                             type: 'category',
#                             title: {
#                                 display: true,
#                                 text: 'Date'
#                             }
#                         },
#                         y: {
#                             beginAtZero: true,
#                             title: {
#                                 display: true,
#                                 text: 'Number of Interactions'
#                             },
#                             ticks: {
#                                 precision: 0 // Ensure whole numbers for counts
#                             }
#                         }
#                     }
#                 }
#             });
# 
#             // Update recent feedback table (Note: 'text' field is not directly passed in data, needs adjustment)
#             const feedbackTableBody = document.getElementById('feedback-table-body');
#             feedbackTableBody.innerHTML = ''; // Clear existing rows
# 
#             if (data.interaction_trends.length === 0) {
#                 document.getElementById('no-feedback-message').classList.remove('hidden');
#             } else {
#                 document.getElementById('no-feedback-message').classList.add('hidden');
#                 // As the dashboard_data API only returns counts and timestamps,
#                 // we cannot display the actual 'text' and 'sentiment' from this API.
#                 // In a real application, the dashboard_data API would return
#                 // a list of recent interactions with text and sentiment included.
#                 // For demonstration, we'll just list timestamps for now.
#                 data.interaction_trends.slice(-5).reverse().forEach(timestamp => { // Show last 5 interactions
#                     const row = feedbackTableBody.insertRow();
#                     row.insertCell().textContent = new Date(timestamp).toLocaleString();
#                     row.insertCell().textContent = "Feedback captured (text not available from this demo API)"; // Placeholder
#                     row.insertCell().textContent = "Sentiment analyzed (not available from this demo API)"; // Placeholder
#                 });
#             }
#         }
# 
#         // Fetch data initially and every 5 seconds
#         document.addEventListener('DOMContentLoaded', () => {
#             fetchDashboardData();
#             setInterval(fetchDashboardData, 5000); // Refresh every 5 seconds
#         });
#     </script>
# </body>
# </html>

# Commented out IPython magic to ensure Python compatibility.
# %%writefile citizen_ai_app/templates/login.html
# <!DOCTYPE html>
# <html lang="en">
# <head>
#     <meta charset="UTF-8">
#     <meta name="viewport" content="width=device-width, initial-scale=1.0">
#     <title>Citizen AI - Login</title>
#     <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
#     <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
#     <!-- Firebase SDK Imports -->
#     <script src="https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js"></script>
#     <script src="https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js"></script>
#     <script src="https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js"></script>
# </head>
# <body class="bg-gray-100 font-inter flex flex-col min-h-screen">
#     <header class="bg-blue-600 text-white p-4 shadow-md">
#         <div class="container mx-auto flex justify-between items-center">
#             <h1 class="text-3xl font-bold">Citizen AI 🤖</h1>
#             <nav>
#                 <ul class="flex space-x-4">
#                     <li><a href="/" class="hover:underline">Home</a></li>
#                     <li><a href="/about" class="hover:underline">About</a></li>
#                     <li><a href="/services" class="hover:underline">Services</a></li>
#                     <li><a href="/chat" class="hover:underline">Chat</a></li>
#                     <li><a href="/dashboard" class="hover:underline">Dashboard</a></li>
#                     <li><a href="/login" class="hover:underline">Login</a></li>
#                 </ul>
#             </nav>
#         </div>
#     </header>
# 
#     <main class="flex-grow container mx-auto p-8 mt-8 flex items-center justify-center">
#         <div class="bg-white rounded-lg shadow-lg p-8 w-full max-w-md">
#             <h2 class="text-3xl font-bold text-gray-800 mb-6 text-center">Login to Citizen AI</h2>
#             <form id="login-form" class="space-y-6">
#                 <div>
#                     <label for="username" class="block text-gray-700 text-sm font-bold mb-2">Email</label>
#                     <input type="email" id="username" name="username" class="shadow appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Enter your email" required>
#                 </div>
#                 <div>
#                     <label for="password" class="block text-gray-700 text-sm font-bold mb-2">Password</label>
#                     <input type="password" id="password" name="password" class="shadow appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 mb-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Enter your password" required>
#                 </div>
#                 <div class="flex items-center justify-between">
#                     <div class="flex items-center">
#                         <input type="checkbox" id="remember_me" name="remember_me" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
#                         <label for="remember_me" class="ml-2 block text-gray-900 text-sm">Remember me</label>
#                     </div>
#                     <a href="#" class="font-semibold text-blue-600 hover:text-blue-800 text-sm">Forgot Password?</a>
#                 </div>
#                 <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg w-full transition duration-300 transform hover:scale-105 focus:outline-none focus:shadow-outline">
#                     Sign In
#                 </button>
#             </form>
#             <p id="login-message" class="mt-4 text-center text-sm"></p>
#             <p class="mt-8 text-center text-gray-600 text-sm">
#                 Don't have an account? <a href="/signup" class="font-semibold text-blue-600 hover:text-blue-800">Sign up here</a>
#             </p>
#         </div>
#     </main>
# 
#     <footer class="bg-gray-800 text-white p-6 mt-12 text-center">
#         <div class="container mx-auto">
#             <p>&copy; 2025 Citizen AI. All rights reserved. Powered by IBM Granite.</p>
#         </div>
#     </footer>
# 
#     <script src="https://cdn.tailwindcss.com"></script>
#     <script type="module">
#         // Firebase initialization (using global variables provided by the Canvas environment)
#         let app;
#         let auth;
#         let db;
#         let userId;
#         let appId;
# 
#         // Initialize Firebase app if not already initialized
#         if (typeof __firebase_config !== 'undefined') {
#             app = firebase.initializeApp(JSON.parse(__firebase_config));
#             auth = firebase.auth();
#             db = firebase.firestore(); // Initialize Firestore
#             appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
# 
#             auth.onAuthStateChanged(async (user) => {
#                 if (user) {
#                     userId = user.uid;
#                     console.log("User is authenticated:", userId);
#                     // You might redirect the user here if they are already logged in
#                     // window.location.href = '/dashboard';
#                 } else {
#                     console.log("No user is authenticated.");
#                     // Sign in anonymously if no other token is provided
#                     if (typeof __initial_auth_token !== 'undefined') {
#                         try {
#                             await auth.signInWithCustomToken(__initial_auth_token);
#                             userId = auth.currentUser.uid;
#                             console.log("Signed in with custom token:", userId);
#                         } catch (error) {
#                             console.error("Error signing in with custom token:", error);
#                             await auth.signInAnonymously();
#                             userId = auth.currentUser.uid;
#                             console.log("Signed in anonymously (fallback):", userId);
#                         }
#                     } else {
#                         await auth.signInAnonymously();
#                         userId = auth.currentUser.uid;
#                         console.log("Signed in anonymously:", userId);
#                     }
#                 }
#             });
#         } else {
#             console.error("Firebase config (__firebase_config) is not defined.");
#         }
# 
# 
#         document.getElementById('login-form').addEventListener('submit', async function(event) {
#             event.preventDefault(); // Prevent default form submission
# 
#             const email = document.getElementById('username').value; // Changed to email
#             const password = document.getElementById('password').value;
#             const messageElement = document.getElementById('login-message');
# 
#             if (!auth) {
#                 messageElement.textContent = 'Firebase authentication not initialized.';
#                 messageElement.className = 'mt-4 text-center text-sm text-red-600';
#                 return;
#             }
# 
#             try {
#                 const userCredential = await auth.signInWithEmailAndPassword(email, password);
#                 messageElement.textContent = `Login successful! Welcome, ${userCredential.user.email}.`;
#                 messageElement.className = 'mt-4 text-center text-sm text-green-600';
#                 // Redirect or update UI after successful login
#                 window.location.href = '/dashboard'; // Example redirect
#             } catch (error) {
#                 console.error('Error during login:', error);
#                 let errorMessage = 'Login failed. Invalid email or password.';
#                 if (error.code === 'auth/user-not-found') {
#                     errorMessage = 'No user found with this email. Please sign up.';
#                 } else if (error.code === 'auth/wrong-password') {
#                     errorMessage = 'Invalid password. Please try again.';
#                 } else if (error.code === 'auth/invalid-email') {
#                     errorMessage = 'Invalid email format.';
#                 }
#                 messageElement.textContent = errorMessage;
#                 messageElement.className = 'mt-4 text-center text-sm text-red-600';
#             }
#         });
#     </script>
# </body>
# </html>
#

# Commented out IPython magic to ensure Python compatibility.
# %%writefile citizen_ai_app/templates/signup.html
# <!DOCTYPE html>
# <html lang="en">
# <head>
#     <meta charset="UTF-8">
#     <meta name="viewport" content="width=device-width, initial-scale=1.0">
#     <title>Citizen AI - Sign Up</title>
#     <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
#     <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
#     <!-- Firebase SDK Imports -->
#     <script src="https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js"></script>
#     <script src="https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js"></script>
#     <script src="https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js"></script>
# </head>
# <body class="bg-gray-100 font-inter flex flex-col min-h-screen">
#     <header class="bg-blue-600 text-white p-4 shadow-md">
#         <div class="container mx-auto flex justify-between items-center">
#             <h1 class="text-3xl font-bold">Citizen AI 🤖</h1>
#             <nav>
#                 <ul class="flex space-x-4">
#                     <li><a href="/" class="hover:underline">Home</a></li>
#                     <li><a href="/about" class="hover:underline">About</a></li>
#                     <li><a href="/services" class="hover:underline">Services</a></li>
#                     <li><a href="/chat" class="hover:underline">Chat</a></li>
#                     <li><a href="/dashboard" class="hover:underline">Dashboard</a></li>
#                     <li><a href="/login" class="hover:underline">Login</a></li>
#                 </ul>
#             </nav>
#         </div>
#     </header>
# 
#     <main class="flex-grow container mx-auto p-8 mt-8 flex items-center justify-center">
#         <div class="bg-white rounded-lg shadow-lg p-8 w-full max-w-md">
#             <h2 class="text-3xl font-bold text-gray-800 mb-6 text-center">Create Your Citizen AI Account</h2>
#             <form id="signup-form" class="space-y-6">
#                 <div>
#                     <label for="new-email" class="block text-gray-700 text-sm font-bold mb-2">Email</label>
#                     <input type="email" id="new-email" name="new-email" class="shadow appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Enter your email" required>
#                 </div>
#                 <div>
#                     <label for="new-password" class="block text-gray-700 text-sm font-bold mb-2">Password</label>
#                     <input type="password" id="new-password" name="new-password" class="shadow appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 mb-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Choose a password" required>
#                 </div>
#                 <button type="submit" class="bg-green-500 hover:bg-green-700 text-white font-bold py-3 px-4 rounded-lg w-full transition duration-300 transform hover:scale-105 focus:outline-none focus:shadow-outline">
#                     Sign Up
#                 </button>
#             </form>
#             <p id="signup-message" class="mt-4 text-center text-sm"></p>
#             <p class="mt-8 text-center text-gray-600 text-sm">
#                 Already have an account? <a href="/login" class="font-semibold text-blue-600 hover:text-blue-800">Log in here</a>
#             </p>
#         </div>
#     </main>
# 
#     <footer class="bg-gray-800 text-white p-6 mt-12 text-center">
#         <div class="container mx-auto">
#             <p>&copy; 2025 Citizen AI. All rights reserved. Powered by IBM Granite.</p>
#         </div>
#     </footer>
# 
#     <script src="https://cdn.tailwindcss.com"></script>
#     <script type="module">
#         // Firebase initialization (using global variables provided by the Canvas environment)
#         let app;
#         let auth;
#         let db;
#         let userId;
#         let appId;
# 
#         // Initialize Firebase app if not already initialized
#         if (typeof __firebase_config !== 'undefined') {
#             app = firebase.initializeApp(JSON.parse(__firebase_config));
#             auth = firebase.auth();
#             db = firebase.firestore(); // Initialize Firestore
#             appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
# 
#             auth.onAuthStateChanged(async (user) => {
#                 if (user) {
#                     userId = user.uid;
#                     console.log("User is authenticated:", userId);
#                     // You might redirect the user here if they are already logged in
#                 } else {
#                     console.log("No user is authenticated.");
#                     // Sign in anonymously if no other token is provided
#                     if (typeof __initial_auth_token !== 'undefined') {
#                         try {
#                             await auth.signInWithCustomToken(__initial_auth_token);
#                             userId = auth.currentUser.uid;
#                             console.log("Signed in with custom token:", userId);
#                         } catch (error) {
#                             console.error("Error signing in with custom token:", error);
#                             await auth.signInAnonymously();
#                             userId = auth.currentUser.uid;
#                             console.log("Signed in anonymously (fallback):", userId);
#                         }
#                     } else {
#                         await auth.signInAnonymously();
#                         userId = auth.currentUser.uid;
#                         console.log("Signed in anonymously:", userId);
#                     }
#                 }
#             });
#         } else {
#             console.error("Firebase config (__firebase_config) is not defined.");
#         }
# 
# 
#         document.getElementById('signup-form').addEventListener('submit', async function(event) {
#             event.preventDefault(); // Prevent default form submission
# 
#             const email = document.getElementById('new-email').value;
#             const password = document.getElementById('new-password').value;
#             const messageElement = document.getElementById('signup-message');
# 
#             if (!auth || !db) {
#                 messageElement.textContent = 'Firebase not initialized. Cannot sign up.';
#                 messageElement.className = 'mt-4 text-center text-sm text-red-600';
#                 return;
#             }
# 
#             try {
#                 // 1. Create user with Email and Password using Firebase Authentication
#                 const userCredential = await auth.createUserWithEmailAndPassword(email, password);
#                 const newUserId = userCredential.user.uid;
# 
#                 // 2. Store additional user profile data in Firestore
#                 // This creates a document in /artifacts/your_app_id/users/user_uid/user_profiles/profile
#                 const userProfileRef = db.collection(`artifacts/${appId}/users/${newUserId}/user_profiles`).doc('profile');
#                 await userProfileRef.set({
#                     email: email,
#                     createdAt: firebase.firestore.FieldValue.serverTimestamp()
#                 });
# 
#                 messageElement.textContent = 'Account created successfully! You can now log in.';
#                 messageElement.className = 'mt-4 text-center text-sm text-green-600';
#                 // Optionally, redirect to login page after successful signup
#                 // setTimeout(() => { window.location.href = '/login'; }, 2000);
# 
#             } catch (error) {
#                 console.error('Error during signup:', error);
#                 let errorMessage = 'Sign up failed. Please try again.';
#                 if (error.code === 'auth/email-already-in-use') {
#                     errorMessage = 'This email is already in use. Please use a different email or log in.';
#                 } else if (error.code === 'auth/weak-password') {
#                     errorMessage = 'Password is too weak. Please choose a stronger password.';
#                 } else if (error.code === 'auth/invalid-email') {
#                     errorMessage = 'Invalid email format.';
#                 }
#                 messageElement.textContent = errorMessage;
#                 messageElement.className = 'mt-4 text-center text-sm text-red-600';
#             }
#         });
#     </script>
# </body>
# </html>

# Commented out IPython magic to ensure Python compatibility.
# %%writefile citizen_ai_app/static/styles.css
# /* Base styles for the app */
# body {
#     font-family: 'Inter', sans-serif;
#     margin: 0;
#     padding: 0;
#     box-sizing: border-box;
#     -webkit-font-smoothing: antialiased;
#     -moz-osx-font-smoothing: grayscale;
# }
# 
# /* Ensure all elements have rounded corners */
# * {
#     border-radius: 0.375rem; /* Equivalent to Tailwind's rounded-md */
# }
# 
# /* Additional custom styles if needed, but primarily use Tailwind */
# 
# /* Animations */
# @keyframes fadeIn {
#     from { opacity: 0; }
#     to { opacity: 1; }
# }
# 
# @keyframes slideUp {
#     from { transform: translateY(20px); opacity: 0; }
#     to { transform: translateY(0); opacity: 1; }
# }
# 
# .animate-fade-in {
#     animation: fadeIn 1s ease-out forwards;
# }
# 
# .animate-slide-up {
#     animation: slideUp 0.8s ease-out forwards;
#     animation-delay: 0.3s; /* Delay for a staggered effect */
#     opacity: 0; /* Ensure it's hidden before animation starts */
# }
# 
# /* Chat window specific scroll behavior (if not handled by Tailwind classes) */
# #chat-window::-webkit-scrollbar {
#     width: 8px;
# }
# 
# #chat-window::-webkit-scrollbar-track {
#     background: #f1f1f1;
#     border-radius: 10px;
# }
# 
# #chat-window::-webkit-scrollbar-thumb {
#     background: #888;
#     border-radius: 10px;
# }
# 
# #chat-window::-webkit-scrollbar-thumb:hover {
#     background: #555;
# }
#

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/citizen_ai_app/

# Remove old logs to ensure a fresh start for monitoring
!rm -f flask_stdout.log flask_stderr.log

# Kill any process running on port 8000 before starting Flask
# This is crucial to prevent "Address already in use" errors.
print("Attempting to kill any process on port 8000...")
!fuser -k 8000/tcp || true
time.sleep(2) # Give a moment for the port to clear

# Run Flask app in the background using nohup and redirecting all output to log files
# 'python -u' ensures unbuffered output for real-time logging
print("Attempting to start Flask application in the background...")
# Changed to direct execution of app.py via run_flask_app.py
!nohup python -u run_flask_app.py > flask_stdout.log 2> flask_stderr.log &

# Give it a moment to ensure the process starts and logs begin to accumulate
print("Giving the Flask app a moment to start and write logs...")
time.sleep(5)

print("\n--- Monitoring Flask app logs ---")
print("Look for 'Running on http://0.0.0.0:8000' and 'Model and pipeline loaded successfully!'.")
print("Press the stop button (square) in the cell's left margin to stop monitoring.")

log_file_path = "/content/citizen_ai_app/flask_stdout.log"
error_file_path = "/content/citizen_ai_app/flask_stderr.log"

last_stdout_size = 0
last_stderr_size = 0

while True:
    try:
        # Read new stdout content
        if os.path.exists(log_file_path):
            with open(log_file_path, 'r') as f:
                f.seek(last_stdout_size)
                new_content = f.read()
                if new_content:
                    print(f"\n--- STDOUT Updates ({datetime.now().strftime('%H:%M:%S')}) ---")
                    print(new_content.strip())
                last_stdout_size = f.tell() # Update last read position

        # Read new stderr content
        if os.path.exists(error_file_path):
            with open(error_file_path, 'r') as f:
                f.seek(last_stderr_size)
                new_error_content = f.read()
                if new_error_content:
                    print(f"\n--- STDERR Updates ({datetime.now().strftime('%H:%M:%S')}) ---")
                    print(new_error_content.strip())
                last_stderr_size = f.tell() # Update last read position

    except FileNotFoundError:
        # This will print while the logs are being created by the nohup process
        print("Waiting for log files to be created...")
    except Exception as e:
        print(f"Error reading logs: {e}")

    time.sleep(5) # Check every 5 seconds

from pyngrok import ngrok, conf
import os
import time

# This is YOUR Ngrok Authtoken
# Get it from: https://dashboard.ngrok.com/get-started/your-authtoken
NGROK_AUTH_TOKEN = "2zECp5I3IJ8HdhhF90dkdhrVzUC_pp7XzXHafM7ugZagN5BY" # <--- YOUR NGROK TOKEN HERE

# Set Ngrok authtoken
conf.get_default().auth_token = NGROK_AUTH_TOKEN

# Kill any running ngrok processes (important if you restart often)
print("Killing any existing Ngrok tunnels...")
ngrok.kill()
time.sleep(5) # Give some time for old tunnels to close gracefully

# Open a tunnel to port 8000 (where your Flask app is running)
print("Attempting to establish Ngrok tunnel...")
try:
    public_url = ngrok.connect(8000).public_url
    print(f"Flask app is live! Access it at: {public_url}")
except Exception as e:
    print(f"Error establishing Ngrok tunnel: {e}")
    print("Please ensure your Ngrok authtoken is correct and the Flask app is running on port 8000.")